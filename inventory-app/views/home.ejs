<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/navStyle.css"/>
  <link rel="stylesheet" href="/homeStyle.css" />
  <title>Movies & Categories</title>
</head>
<style>
  .formDiv {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;

  }
  .formDiv button{
    border: none;

    transform: translateX(50%);
  }
</style>
<body>
  <%- include('navbar') %>
  <%- include('display') %>
  <main>
    <ul class="movie-list">
      <% movie_cat.forEach((movie, index) => { %>
          <li class="m-ctn">
            <h2> <%= movie.category || "Uncategorized" %></h2>
            <div class="movie-ctn">
                <div class="post-container" id="postCon<%=index%>">                
                  <% movie.movies.forEach(movie => { %>
                  <div class="movie-card" id="movieID<%=movie.movie_id%>" onclick="openOverlay('<%=movie.movie_id%>, <%=movie.img%>, <%=movie.name%>')">
                    <img class="Posters" src="<%= movie.img %>" alt="<% movie.name %> poster"/>
                    <div class="bottom">
                      <h3><%= movie.name %></h3>
                      <div id="delete-form-<%= movie.movie_id %>" class="hidden"
                      style="padding: 10px; padding-left: 50px; padding-right: 50px;">
                      <form action="/<%= movie.movie_id %>/delete" method="POST" style="display:inline;">
                        <label>Password:</label>
                        <input type="password" name="password" onclick="event.stopPropagation()"/><br/>
                        <button style="border-radius: 10px; background-color: rgb(80, 122, 122);" 
                                type="submit"
                                onclick="event.stopPropagation()">
                          Enter
                        </button>
                        <button
                          style="border-radius: 10px; background-color: rgb(80, 122, 122);"
                          type="button"
                          onclick="event.stopPropagation(); document.getElementById('delete-form-<%= movie.movie_id %>').classList.toggle('hidden')">
                          close
                        </button>
                      </form>
                    </div>
                    <button
                      style="border-radius: 10px; background-color: rgb(80, 122, 122);"
                      type="button"
                      onclick="event.stopPropagation(); document.getElementById('delete-form-<%= movie.movie_id %>').classList.toggle('hidden')">
                      Delete
                    </button>
                    </div>
                  </div>
                  <% }) %>
              </div>
              <button class="controls prev" onclick="prev(<%= index %>)">‹</button>
              <button class="controls next" onclick="next(<%= index %>)">›</button>
            </div>
          </li>
      <% }) %>
    </ul>
  </main>
</body>
</html>

<script>
  function openOverlay(modelImg) {
    if (document.querySelector('.overlay')) {
      return;
    }

    const [index, url, title] = modelImg.split(',');
    
    const overlay = document.createElement('div');
    const img = document.createElement('img');
    const name = document.createElement('h1');
    const closeButton = document.createElement('button');
    const updateButton = document.createElement('button');

    updateButton.classList.add('update-button');
    updateButton.textContent = 'update';
    
    closeButton.classList.add('close-button');
    closeButton.textContent = '×';
    closeButton.addEventListener('click', (e) => {
      e.stopPropagation();
      closeOverlay();
    });

    updateButton.addEventListener('click', (e) => {
      e.stopPropagation();
      updateMovie();
      updateButton.disabled = true;

    })
    overlay.classList.add('overlay');
    img.src = url;
    img.alt = title + ' poster';
    name.textContent = title;
    overlay.dataset.id = index;
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        closeOverlay();
      }
    });
    
    overlay.append(img, name, closeButton, updateButton);
    document.body.appendChild(overlay);
    
    document.body.style.overflow = 'hidden';
    
    requestAnimationFrame(() => {
      overlay.classList.add('show');
    });
  }

function updateMovie() {
  const container = document.querySelector('.overlay');
  const name = container.querySelector('h1');
  const img = container.querySelector('img');

  const formDiv = document.createElement('div');
  formDiv.classList.add('formDiv');

  formDiv.innerHTML = `
    <form class="updateForm">
      <label style="color: white;">Movie Name: </label>
      <input type="text" name="name" value="${name.textContent}" /> <br>
      <label style="color: white;">Img: </label>
      <input type="text" name="img" value="${img.src}" /> <br>
      <label style="color: white;">Password: </label>
      <input type="password" name="password" />
      <br>
      <button type="submit">Update</button>
      <button type="button" onclick="removeForm()">Cancel</button>
    </form>
  `;

  container.appendChild(formDiv);
  const id = container.dataset.id;

  const form = formDiv.querySelector('.updateForm');
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = {
      name: form.elements.name.value,
      img: form.elements.img.value,
      password: form.elements.password.value
    };

    try {
      const response = await fetch(`/movie/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(formData)
      });

       if (response.ok) {

        container.querySelector('img').src = formData.img;
        container.querySelector('h1').textContent = formData.name;
        removeForm();
        
        setTimeout(() => {
          window.location.reload();
        }, 1500);
        
      }
    } catch (err) {
      console.error("Update failed:", err);
    }
  });
}

  function removeForm() {
    const container = document.querySelector('.overlay');
    const formDiv = document.querySelector('.formDiv');
    container.removeChild(formDiv);
    const updatebutton = container.querySelector('.update-button');
    updatebutton.disabled = false;
    
  }
  function closeOverlay() {
    const overlay = document.querySelector(".overlay");
    
    if (!overlay) {
      return; 
    }
    
    overlay.classList.remove('show');
    
    setTimeout(() => {
      if (overlay && overlay.parentNode) {
        document.body.removeChild(overlay);
      }
      document.body.style.overflow = '';
    }, 300); 
  }

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeOverlay();
    }
  });

  window.addEventListener('load', () => {
    const existingOverlay = document.querySelector('.overlay');
    if (existingOverlay) {
      existingOverlay.remove();
      document.body.style.overflow = '';
    }
  });
  
  class slideMovies {
    constructor() {
      this.slideState = {};
    }

    getSlideState(index) {
      if(!this.slideState[index]){
        this.slideState[index] = {
          currentIndex: 0,
          container: document.getElementById(`postCon${index}`),
          postperview: 0, 
          posters: null,
          totalSlide: 0
        }
      }
      return this.slideState[index];
    }

    calculatepost(container) {
      const widthC = container.parentElement.offsetWidth;
      const poster = 250;
      return Math.max(1, Math.floor(widthC / poster));
    }

    updateSliderData(index){
      const state = this.getSlideState(index);
      if(!state.container){
        console.warn(`No conatiner found ofr index ${index}`)
        return false;
      }
      state.posters = state.container.querySelectorAll('.movie-card');
      state.postperview = this.calculatepost(state.container);
      state.totalSlide = Math.max(0, state.posters.length - state.postperview + 1);

    }

    updateSlide(index) {
      const state = this.getSlideState(index);
      const translatex = -state.currentIndex * 250;
      state.container.style.transform = `translateX(${translatex}px)`;
    }
    
    prevSlide(index) {
      this.updateSliderData(index);
      const state = this.getSlideState(index);
      state.currentIndex = state.currentIndex === 0 ? state.totalSlide : state.currentIndex - 1;
      this.updateSlide(index);
    }
    
    nextSlide(index) {
      this.updateSliderData(index);
      const state = this.getSlideState(index);
      state.currentIndex = (state.currentIndex + 1) % state.totalSlide;
      this.updateSlide(index);
    }
  }


  function prev(index) {
    slideButton.prevSlide(index);
  }

  function next(index) {
    slideButton.nextSlide(index);
  }

  const slideButton = new slideMovies();



window.addEventListener('resize', () => {
  Object.keys(slideButton.slideState).forEach(index => {
    slideButton.updateSliderData(index);
  });
});
  
</script>